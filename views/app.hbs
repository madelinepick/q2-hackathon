<h1 class='apptitle'>Progamming Bubbles</h1>
<div class="middle">
  <p>Hi, {{name}}!</p><br>
  <a href="/logout">Logout</a>
  <h3>
    Remember that <a href="http://stackoverflow.com/research/developer-survey-2016">cool</a> survey stack overflow did about programming? See the data in a new way!
  </h3>
</div>

<div class='middle'>
  <button class="all">all</button>
  <button class="students">Students</button>
  <button class="fullstack">Full Stack</button>
  <button class="frontend">Front End</button>
  <button class="backend">Back End</button>
  <button class="mobile">Mobile</button>
  <button class="math">Math and Data</button>
</div>
<div class="container">

</div>

<script>
$(function(){
  $('button').on('click', function(event){
    $('html, body').animate({
      scrollTop: $(".container").offset().top
  }, 1000);
  event.preventDefault();
      $('.container').empty();
        var thisData = "/json/"+$(this).attr('class')+".json";
        function getRandomColor() {
              var letters = '0123456789ABCDEF'.split('');
              var color = '#';
              for (var i = 0; i < 6; i++ ) {
                  color += letters[Math.floor(Math.random() * 16)];
              }
              return ""+color;
          }
        var colorArray = [getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor(),getRandomColor()];

        var diameter = $(window).width()*0.5,
            format = d3.format(",d"),
            color =  d3.scale.ordinal()
          .domain([1,100])
          .range(colorArray);

        var bubble = d3.layout.pack()
            .sort(null)
            .size([diameter, diameter])
            .padding(1);

        var svg = d3.select(".container").append("svg")
            .attr("width", diameter)
            .attr("height", diameter)
            .attr("class", "bubble");

        d3.json(thisData, function(error, root) {
          if (error) throw error;

          var node = svg.selectAll(".node")
              .data(bubble.nodes(classes(root))
              .filter(function(d) { return !d.children; }))
              .enter().append("g")
              .attr("class", "node")
              .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });

          node.append("title")
              .text(function(d) { return d.className + ": " + format(d.value); });

          node.append("circle")
              .attr("r", function(d) { return d.r; })
              .style("fill", function(d) { return color(d.packageName); });

          if(thisData === "/json/all.json"){
            node.append("text")
                .attr('class', "alltext")
                .attr("dy", ".3em")
                .style("text-anchor", "middle")
                .text(function(d) { return d.className.substring(0, d.r / 3); });
            node.append("text")
                .attr("class", "allsmaller")
                .attr("dy", "15px")
                .style("text-anchor", "middle")
                .text(function(d) { return d.value+"%"; });
          }else{
            node.append("text")
                .attr("dy", ".3em")
                .style("text-anchor", "middle")
                .text(function(d) { return d.className.substring(0, d.r / 3); });
            node.append("text")
                .attr("class", "percentage")
                .attr("dy", "25px")
                .style("text-anchor", "middle")
                .text(function(d) { return d.value+"%"; });
            };

        });

        // Returns a flattened hierarchy containing all leaf nodes under the root.
        function classes(root) {
          var classes = [];

          function recurse(name, node) {
            if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
            else classes.push({packageName: name, className: node.name, value: node.size});
          }

          recurse(null, root);
          return {children: classes};
        }

        d3.select(self.frameElement).style("height", diameter + "px");

  })

})

</script>
